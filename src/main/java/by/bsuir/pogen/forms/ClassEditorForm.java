package by.bsuir.pogen.forms;

import by.bsuir.pogen.constants.Constants;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import org.watertemplate.Template;

import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

/**
 * Created by Alexei Khilchuk on 15.08.2018.
 */
public class ClassEditorForm extends JFrame {
    public JPanel mainPanel;
    private JEditorPane epCode;
    private JButton btnSave;

    ClassEditorForm(Template classTemplate, final Constants.ProgrammingLanguage language) {
        super("Generated Page Object Class");
        epCode.setText(classTemplate.render());
        btnSave.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                saveAs(language);
            }
        });
    }

    private void saveAs(Constants.ProgrammingLanguage language) {
        FileNameExtensionFilter extensionFilter = null;
        switch (language) {
            case JAVA: {
                extensionFilter = new FileNameExtensionFilter("Java Class File", "java");
                break;
            }
            case C_SHARP: {
                extensionFilter = new FileNameExtensionFilter("C# Class File", "cs");
                break;
            }
        }

        final FileDialog saveAsFileChooser = new FileDialog(this, "Save Generated class", FileDialog.SAVE);

        saveAsFileChooser.setVisible(true);
        String chosenDir = saveAsFileChooser.getDirectory();
        String chosenFile = saveAsFileChooser.getFile();
        saveAsFileChooser.dispose();
        File file;
        if (chosenDir != null && chosenFile != null) {
            file = new File(chosenDir + chosenFile);
            if (!file.getName().endsWith("." + extensionFilter.getExtensions()[0])) {
                file = new File(file.getAbsolutePath() + "." + extensionFilter.getExtensions()[0]);
            }

            BufferedWriter outFile = null;
            try {
                outFile = new BufferedWriter(new FileWriter(file));

                epCode.write(outFile);

            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, ex.getMessage());
            } finally {
                if (outFile != null) {
                    try {
                        outFile.close();
                    } catch (IOException e) {
                        JOptionPane.showMessageDialog(null, e.getMessage());
                    }
                }
            }
        }


    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        final JScrollPane scrollPane1 = new JScrollPane();
        mainPanel.add(scrollPane1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        epCode = new JEditorPane();
        Font epCodeFont = this.$$$getFont$$$("Courier New", -1, 16, epCode.getFont());
        if (epCodeFont != null) epCode.setFont(epCodeFont);
        scrollPane1.setViewportView(epCode);
        btnSave = new JButton();
        Font btnSaveFont = this.$$$getFont$$$("Segoe UI Semibold", -1, 18, btnSave.getFont());
        if (btnSaveFont != null) btnSave.setFont(btnSaveFont);
        btnSave.setText("Save Class");
        mainPanel.add(btnSave, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }
}
